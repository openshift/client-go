// Code generated by applyconfiguration-gen. DO NOT EDIT.

package applyconfigurations

import (
	v1 "github.com/openshift/api/operatoringress/v1"
	internal "github.com/openshift/client-go/operatoringress/applyconfigurations/internal"
	operatoringressv1 "github.com/openshift/client-go/operatoringress/applyconfigurations/operatoringress/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	managedfields "k8s.io/apimachinery/pkg/util/managedfields"
)

// ForKind returns an apply configuration type for the given GroupVersionKind, or nil if no
// apply configuration type exists for the given GroupVersionKind.
func ForKind(kind schema.GroupVersionKind) interface{} {
	switch kind {
	// Group=ingress.operator.openshift.io, Version=v1
	case v1.SchemeGroupVersion.WithKind("DNSRecord"):
		return &operatoringressv1.DNSRecordApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("DNSRecordSpec"):
		return &operatoringressv1.DNSRecordSpecApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("DNSRecordStatus"):
		return &operatoringressv1.DNSRecordStatusApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("DNSZoneCondition"):
		return &operatoringressv1.DNSZoneConditionApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("DNSZoneStatus"):
		return &operatoringressv1.DNSZoneStatusApplyConfiguration{}

	}
	return nil
}

func NewTypeConverter(scheme *runtime.Scheme) managedfields.TypeConverter {
	return managedfields.NewSchemeTypeConverter(scheme, internal.Parser())
}
