package v1

// This file contains a collection of methods that can be used from go-restful to
// generate Swagger API documentation for its models. Please read this PR for more
// information on the implementation: https://github.com/emicklei/go-restful/pull/215
//
// TODOs are ignored from the parser (e.g. TODO(andronat):... || TODO:...) if and only if
// they are on one line! For multiple line or blocks that you want to ignore use ---.
// Any context after a --- is ignored.
//
// Those methods can be generated by using hack/update-generated-swagger-docs.sh

// AUTO-GENERATED FUNCTIONS START HERE
var map_CapnsLogConfig = map[string]string{
	"level": "level is passed to capnslog: critical, error, warning, notice, info, debug, trace",
}

func (CapnsLogConfig) SwaggerDoc() map[string]string {
	return map_CapnsLogConfig
}

var map_GenerationStatus = map[string]string{
	"":               "GenerationStatus keeps track of the generation for a given resource so that decisions about forced updates can be made.",
	"group":          "group is the group of the thing you're tracking",
	"resource":       "resource is the resource type of the thing you're tracking",
	"namespace":      "namespace is where the thing you're tracking is",
	"name":           "name is the name of the thing you're tracking",
	"lastGeneration": "lastGeneration is the last generation of the workload controller involved",
	"hash":           "hash is an optional field set for resources without generation that are content sensitive like secrets and configmaps",
}

func (GenerationStatus) SwaggerDoc() map[string]string {
	return map_GenerationStatus
}

var map_GlogConfig = map[string]string{
	"":        "GlogConfig holds information about configuring logging",
	"level":   "level is passed to glog.",
	"vmodule": "vmodule is passed to glog.",
}

func (GlogConfig) SwaggerDoc() map[string]string {
	return map_GlogConfig
}

var map_JavaLog = map[string]string{
	"level": "level is passed to jsr47: fatal, error, warning, info, fine, finer, finest",
}

func (JavaLog) SwaggerDoc() map[string]string {
	return map_JavaLog
}

var map_LoggingConfig = map[string]string{
	"": "LoggingConfig holds information about configuring logging",
}

func (LoggingConfig) SwaggerDoc() map[string]string {
	return map_LoggingConfig
}

var map_MyOperatorResource = map[string]string{
	"": "MyOperatorResource is an example operator configuration type",
}

func (MyOperatorResource) SwaggerDoc() map[string]string {
	return map_MyOperatorResource
}

var map_NodeStatus = map[string]string{
	"":                         "NodeStatus provides information about the current state of a particular node managed by this operator.",
	"nodeName":                 "nodeName is the name of the node",
	"currentRevision":          "currentRevision is the generation of the most recently successful deployment",
	"targetRevision":           "targetRevision is the generation of the deployment we're trying to apply",
	"lastFailedRevision":       "lastFailedRevision is the generation of the deployment we tried and failed to deploy.",
	"lastFailedRevisionErrors": "lastFailedRevisionErrors is a list of the errors during the failed deployment referenced in lastFailedRevision",
}

func (NodeStatus) SwaggerDoc() map[string]string {
	return map_NodeStatus
}

var map_OperandContainerSpec = map[string]string{
	"name":      "name is the name of the container to modify",
	"resources": "resources are the requests and limits to place in the container.  Nil means to accept the defaults.",
	"logging":   "logging contains parameters for setting log values on the operand. Nil means to accept the defaults.",
}

func (OperandContainerSpec) SwaggerDoc() map[string]string {
	return map_OperandContainerSpec
}

var map_OperandSpec = map[string]string{
	"":                           "OperandSpec holds information for customization of a particular functional unit - logically maps to a workload",
	"name":                       "name is the name of this unit.  The operator must be aware of it.",
	"operandContainerSpecs":      "operandContainerSpecs are per-container options",
	"unsupportedResourcePatches": "unsupportedResourcePatches are applied to the workload resource for this unit. This is an unsupported workaround if anything needs to be modified on the workload that is not otherwise configurable.",
}

func (OperandSpec) SwaggerDoc() map[string]string {
	return map_OperandSpec
}

var map_OperatorCondition = map[string]string{
	"": "OperatorCondition is just the standard condition fields.",
}

func (OperatorCondition) SwaggerDoc() map[string]string {
	return map_OperatorCondition
}

var map_OperatorSpec = map[string]string{
	"":                           "OperatorSpec contains common fields operators need.  It is intended to be anonymous included inside of the Spec struct for your particular operator.",
	"managementState":            "managementState indicates whether and how the operator should manage the component",
	"operandSpecs":               "operandSpecs provide customization for functional units within the component",
	"unsupportedConfigOverrides": "unsupportedConfigOverrides holds a sparse config that will override any previously set options.  It only needs to be the fields to override it will end up overlaying in the following order: 1. hardcoded defaults 2. observedConfig 3. unsupportedConfigOverrides",
	"observedConfig":             "observedConfig holds a sparse config that controller has observed from the cluster state.  It exists in spec because it is an input to the level for the operator",
}

func (OperatorSpec) SwaggerDoc() map[string]string {
	return map_OperatorSpec
}

var map_OperatorStatus = map[string]string{
	"observedGeneration": "observedGeneration is the last generation change you've dealt with",
	"conditions":         "conditions is a list of conditions and their status",
	"version":            "version is the level this availability applies to",
	"readyReplicas":      "readyReplicas indicates how many replicas are ready and at the desired state",
	"generations":        "generations are used to determine when an item needs to be reconciled or has changed in a way that needs a reaction.",
}

func (OperatorStatus) SwaggerDoc() map[string]string {
	return map_OperatorStatus
}

var map_ResourcePatch = map[string]string{
	"":      "ResourcePatch is a way to represent the patch you would issue to `kubectl patch` in the API",
	"type":  "type is the type of patch to apply: jsonmerge, strategicmerge",
	"patch": "patch the patch itself",
}

func (ResourcePatch) SwaggerDoc() map[string]string {
	return map_ResourcePatch
}

var map_StaticPodOperatorStatus = map[string]string{
	"": "StaticPodOperatorStatus is status for controllers that manage static pods.  There are different needs because individual node status must be tracked.",
	"latestAvailableRevision": "latestAvailableRevision is the deploymentID of the most recent deployment",
	"nodeStatuses":            "nodeStatuses track the deployment values and errors across individual nodes",
}

func (StaticPodOperatorStatus) SwaggerDoc() map[string]string {
	return map_StaticPodOperatorStatus
}

// AUTO-GENERATED FUNCTIONS END HERE
