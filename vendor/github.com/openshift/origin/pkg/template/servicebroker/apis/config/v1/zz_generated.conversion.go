// +build !ignore_autogenerated_openshift

// This file was autogenerated by conversion-gen. Do not edit it manually!

package v1

import (
	config "github.com/openshift/origin/pkg/template/servicebroker/apis/config"
	conversion "k8s.io/apimachinery/pkg/conversion"
	runtime "k8s.io/apimachinery/pkg/runtime"
	unsafe "unsafe"
)

func init() {
	SchemeBuilder.Register(RegisterConversions)
}

// RegisterConversions adds conversion functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterConversions(scheme *runtime.Scheme) error {
	return scheme.AddGeneratedConversionFuncs(
		Convert_v1_TemplateServiceBrokerConfig_To_config_TemplateServiceBrokerConfig,
		Convert_config_TemplateServiceBrokerConfig_To_v1_TemplateServiceBrokerConfig,
	)
}

func autoConvert_v1_TemplateServiceBrokerConfig_To_config_TemplateServiceBrokerConfig(in *TemplateServiceBrokerConfig, out *config.TemplateServiceBrokerConfig, s conversion.Scope) error {
	out.TemplateNamespaces = *(*[]string)(unsafe.Pointer(&in.TemplateNamespaces))
	return nil
}

// Convert_v1_TemplateServiceBrokerConfig_To_config_TemplateServiceBrokerConfig is an autogenerated conversion function.
func Convert_v1_TemplateServiceBrokerConfig_To_config_TemplateServiceBrokerConfig(in *TemplateServiceBrokerConfig, out *config.TemplateServiceBrokerConfig, s conversion.Scope) error {
	return autoConvert_v1_TemplateServiceBrokerConfig_To_config_TemplateServiceBrokerConfig(in, out, s)
}

func autoConvert_config_TemplateServiceBrokerConfig_To_v1_TemplateServiceBrokerConfig(in *config.TemplateServiceBrokerConfig, out *TemplateServiceBrokerConfig, s conversion.Scope) error {
	if in.TemplateNamespaces == nil {
		out.TemplateNamespaces = make([]string, 0)
	} else {
		out.TemplateNamespaces = *(*[]string)(unsafe.Pointer(&in.TemplateNamespaces))
	}
	return nil
}

// Convert_config_TemplateServiceBrokerConfig_To_v1_TemplateServiceBrokerConfig is an autogenerated conversion function.
func Convert_config_TemplateServiceBrokerConfig_To_v1_TemplateServiceBrokerConfig(in *config.TemplateServiceBrokerConfig, out *TemplateServiceBrokerConfig, s conversion.Scope) error {
	return autoConvert_config_TemplateServiceBrokerConfig_To_v1_TemplateServiceBrokerConfig(in, out, s)
}
