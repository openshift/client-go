// Code generated by applyconfiguration-gen. DO NOT EDIT.

package applyconfigurations

import (
	v1alpha1 "github.com/openshift/api/insights/v1alpha1"
	insightsv1alpha1 "github.com/openshift/client-go/insights/applyconfigurations/insights/v1alpha1"
	internal "github.com/openshift/client-go/insights/applyconfigurations/internal"
	runtime "k8s.io/apimachinery/pkg/runtime"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	testing "k8s.io/client-go/testing"
)

// ForKind returns an apply configuration type for the given GroupVersionKind, or nil if no
// apply configuration type exists for the given GroupVersionKind.
func ForKind(kind schema.GroupVersionKind) interface{} {
	switch kind {
	// Group=insights.openshift.io, Version=v1alpha1
	case v1alpha1.SchemeGroupVersion.WithKind("DataGather"):
		return &insightsv1alpha1.DataGatherApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("DataGatherSpec"):
		return &insightsv1alpha1.DataGatherSpecApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("DataGatherStatus"):
		return &insightsv1alpha1.DataGatherStatusApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("GathererConfig"):
		return &insightsv1alpha1.GathererConfigApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("GathererStatus"):
		return &insightsv1alpha1.GathererStatusApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("HealthCheck"):
		return &insightsv1alpha1.HealthCheckApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("InsightsReport"):
		return &insightsv1alpha1.InsightsReportApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("ObjectReference"):
		return &insightsv1alpha1.ObjectReferenceApplyConfiguration{}

	}
	return nil
}

func NewTypeConverter(scheme *runtime.Scheme) *testing.TypeConverter {
	return &testing.TypeConverter{Scheme: scheme, TypeResolver: internal.Parser()}
}
