// Code generated by applyconfiguration-gen. DO NOT EDIT.

package applyconfigurations

import (
	v1beta1 "github.com/openshift/api/helm/v1beta1"
	helmv1beta1 "github.com/openshift/client-go/helm/applyconfigurations/helm/v1beta1"
	internal "github.com/openshift/client-go/helm/applyconfigurations/internal"
	runtime "k8s.io/apimachinery/pkg/runtime"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	testing "k8s.io/client-go/testing"
)

// ForKind returns an apply configuration type for the given GroupVersionKind, or nil if no
// apply configuration type exists for the given GroupVersionKind.
func ForKind(kind schema.GroupVersionKind) interface{} {
	switch kind {
	// Group=helm.openshift.io, Version=v1beta1
	case v1beta1.SchemeGroupVersion.WithKind("ConnectionConfig"):
		return &helmv1beta1.ConnectionConfigApplyConfiguration{}
	case v1beta1.SchemeGroupVersion.WithKind("ConnectionConfigNamespaceScoped"):
		return &helmv1beta1.ConnectionConfigNamespaceScopedApplyConfiguration{}
	case v1beta1.SchemeGroupVersion.WithKind("HelmChartRepository"):
		return &helmv1beta1.HelmChartRepositoryApplyConfiguration{}
	case v1beta1.SchemeGroupVersion.WithKind("HelmChartRepositorySpec"):
		return &helmv1beta1.HelmChartRepositorySpecApplyConfiguration{}
	case v1beta1.SchemeGroupVersion.WithKind("HelmChartRepositoryStatus"):
		return &helmv1beta1.HelmChartRepositoryStatusApplyConfiguration{}
	case v1beta1.SchemeGroupVersion.WithKind("ProjectHelmChartRepository"):
		return &helmv1beta1.ProjectHelmChartRepositoryApplyConfiguration{}
	case v1beta1.SchemeGroupVersion.WithKind("ProjectHelmChartRepositorySpec"):
		return &helmv1beta1.ProjectHelmChartRepositorySpecApplyConfiguration{}

	}
	return nil
}

func NewTypeConverter(scheme *runtime.Scheme) *testing.TypeConverter {
	return &testing.TypeConverter{Scheme: scheme, TypeResolver: internal.Parser()}
}
