// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1 "github.com/openshift/api/image/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	testing "k8s.io/client-go/testing"
)

// FakeImageSignatures implements ImageSignatureInterface
type FakeImageSignatures struct {
	Fake *FakeImageV1
}

var imagesignaturesResource = v1.SchemeGroupVersion.WithResource("imagesignatures")

var imagesignaturesKind = v1.SchemeGroupVersion.WithKind("ImageSignature")

// Create takes the representation of a imageSignature and creates it.  Returns the server's representation of the imageSignature, and an error, if there is any.
func (c *FakeImageSignatures) Create(ctx context.Context, imageSignature *v1.ImageSignature, opts metav1.CreateOptions) (result *v1.ImageSignature, err error) {
	emptyResult := &v1.ImageSignature{}
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateActionWithOptions(imagesignaturesResource, imageSignature, opts), emptyResult)
	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1.ImageSignature), err
}

// Delete takes name of the imageSignature and deletes it. Returns an error if one occurs.
func (c *FakeImageSignatures) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteActionWithOptions(imagesignaturesResource, name, opts), &v1.ImageSignature{})
	return err
}
