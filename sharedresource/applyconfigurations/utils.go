// Code generated by applyconfiguration-gen. DO NOT EDIT.

package applyconfigurations

import (
	v1alpha1 "github.com/openshift/api/sharedresource/v1alpha1"
	internal "github.com/openshift/client-go/sharedresource/applyconfigurations/internal"
	sharedresourcev1alpha1 "github.com/openshift/client-go/sharedresource/applyconfigurations/sharedresource/v1alpha1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	testing "k8s.io/client-go/testing"
)

// ForKind returns an apply configuration type for the given GroupVersionKind, or nil if no
// apply configuration type exists for the given GroupVersionKind.
func ForKind(kind schema.GroupVersionKind) interface{} {
	switch kind {
	// Group=sharedresource.openshift.io, Version=v1alpha1
	case v1alpha1.SchemeGroupVersion.WithKind("SharedConfigMap"):
		return &sharedresourcev1alpha1.SharedConfigMapApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("SharedConfigMapReference"):
		return &sharedresourcev1alpha1.SharedConfigMapReferenceApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("SharedConfigMapSpec"):
		return &sharedresourcev1alpha1.SharedConfigMapSpecApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("SharedConfigMapStatus"):
		return &sharedresourcev1alpha1.SharedConfigMapStatusApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("SharedSecret"):
		return &sharedresourcev1alpha1.SharedSecretApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("SharedSecretReference"):
		return &sharedresourcev1alpha1.SharedSecretReferenceApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("SharedSecretSpec"):
		return &sharedresourcev1alpha1.SharedSecretSpecApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("SharedSecretStatus"):
		return &sharedresourcev1alpha1.SharedSecretStatusApplyConfiguration{}

	}
	return nil
}

func NewTypeConverter(scheme *runtime.Scheme) *testing.TypeConverter {
	return &testing.TypeConverter{Scheme: scheme, TypeResolver: internal.Parser()}
}
