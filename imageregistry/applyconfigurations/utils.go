// Code generated by applyconfiguration-gen. DO NOT EDIT.

package applyconfigurations

import (
	v1 "github.com/openshift/api/imageregistry/v1"
	imageregistryv1 "github.com/openshift/client-go/imageregistry/applyconfigurations/imageregistry/v1"
	internal "github.com/openshift/client-go/imageregistry/applyconfigurations/internal"
	runtime "k8s.io/apimachinery/pkg/runtime"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	testing "k8s.io/client-go/testing"
)

// ForKind returns an apply configuration type for the given GroupVersionKind, or nil if no
// apply configuration type exists for the given GroupVersionKind.
func ForKind(kind schema.GroupVersionKind) interface{} {
	switch kind {
	// Group=imageregistry.operator.openshift.io, Version=v1
	case v1.SchemeGroupVersion.WithKind("AzureNetworkAccess"):
		return &imageregistryv1.AzureNetworkAccessApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("AzureNetworkAccessInternal"):
		return &imageregistryv1.AzureNetworkAccessInternalApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("Config"):
		return &imageregistryv1.ConfigApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("EncryptionAlibaba"):
		return &imageregistryv1.EncryptionAlibabaApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("ImagePruner"):
		return &imageregistryv1.ImagePrunerApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("ImagePrunerSpec"):
		return &imageregistryv1.ImagePrunerSpecApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("ImagePrunerStatus"):
		return &imageregistryv1.ImagePrunerStatusApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("ImageRegistryConfigProxy"):
		return &imageregistryv1.ImageRegistryConfigProxyApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("ImageRegistryConfigRequests"):
		return &imageregistryv1.ImageRegistryConfigRequestsApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("ImageRegistryConfigRequestsLimits"):
		return &imageregistryv1.ImageRegistryConfigRequestsLimitsApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("ImageRegistryConfigRoute"):
		return &imageregistryv1.ImageRegistryConfigRouteApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("ImageRegistryConfigStorage"):
		return &imageregistryv1.ImageRegistryConfigStorageApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("ImageRegistryConfigStorageAlibabaOSS"):
		return &imageregistryv1.ImageRegistryConfigStorageAlibabaOSSApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("ImageRegistryConfigStorageAzure"):
		return &imageregistryv1.ImageRegistryConfigStorageAzureApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("ImageRegistryConfigStorageGCS"):
		return &imageregistryv1.ImageRegistryConfigStorageGCSApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("ImageRegistryConfigStorageIBMCOS"):
		return &imageregistryv1.ImageRegistryConfigStorageIBMCOSApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("ImageRegistryConfigStoragePVC"):
		return &imageregistryv1.ImageRegistryConfigStoragePVCApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("ImageRegistryConfigStorageS3"):
		return &imageregistryv1.ImageRegistryConfigStorageS3ApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("ImageRegistryConfigStorageS3CloudFront"):
		return &imageregistryv1.ImageRegistryConfigStorageS3CloudFrontApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("ImageRegistryConfigStorageSwift"):
		return &imageregistryv1.ImageRegistryConfigStorageSwiftApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("ImageRegistrySpec"):
		return &imageregistryv1.ImageRegistrySpecApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("ImageRegistryStatus"):
		return &imageregistryv1.ImageRegistryStatusApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("KMSEncryptionAlibaba"):
		return &imageregistryv1.KMSEncryptionAlibabaApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("S3TrustedCASource"):
		return &imageregistryv1.S3TrustedCASourceApplyConfiguration{}

	}
	return nil
}

func NewTypeConverter(scheme *runtime.Scheme) *testing.TypeConverter {
	return &testing.TypeConverter{Scheme: scheme, TypeResolver: internal.Parser()}
}
