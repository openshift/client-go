// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// PodNetworkConnectivityCheckStatusApplyConfiguration represents a declarative configuration of the PodNetworkConnectivityCheckStatus type for use
// with apply.
type PodNetworkConnectivityCheckStatusApplyConfiguration struct {
	Successes  []LogEntryApplyConfiguration                             `json:"successes,omitempty"`
	Failures   []LogEntryApplyConfiguration                             `json:"failures,omitempty"`
	Outages    []OutageEntryApplyConfiguration                          `json:"outages,omitempty"`
	Conditions []PodNetworkConnectivityCheckConditionApplyConfiguration `json:"conditions,omitempty"`
}

// PodNetworkConnectivityCheckStatusApplyConfiguration constructs a declarative configuration of the PodNetworkConnectivityCheckStatus type for use with
// apply.
func PodNetworkConnectivityCheckStatus() *PodNetworkConnectivityCheckStatusApplyConfiguration {
	return &PodNetworkConnectivityCheckStatusApplyConfiguration{}
}

// WithSuccesses adds the given value to the Successes field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Successes field.
func (b *PodNetworkConnectivityCheckStatusApplyConfiguration) WithSuccesses(values ...*LogEntryApplyConfiguration) *PodNetworkConnectivityCheckStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithSuccesses")
		}
		b.Successes = append(b.Successes, *values[i])
	}
	return b
}

// WithFailures adds the given value to the Failures field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Failures field.
func (b *PodNetworkConnectivityCheckStatusApplyConfiguration) WithFailures(values ...*LogEntryApplyConfiguration) *PodNetworkConnectivityCheckStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithFailures")
		}
		b.Failures = append(b.Failures, *values[i])
	}
	return b
}

// WithOutages adds the given value to the Outages field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Outages field.
func (b *PodNetworkConnectivityCheckStatusApplyConfiguration) WithOutages(values ...*OutageEntryApplyConfiguration) *PodNetworkConnectivityCheckStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithOutages")
		}
		b.Outages = append(b.Outages, *values[i])
	}
	return b
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *PodNetworkConnectivityCheckStatusApplyConfiguration) WithConditions(values ...*PodNetworkConnectivityCheckConditionApplyConfiguration) *PodNetworkConnectivityCheckStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}
