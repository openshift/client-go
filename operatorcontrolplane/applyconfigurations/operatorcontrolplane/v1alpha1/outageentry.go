// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// OutageEntryApplyConfiguration represents a declarative configuration of the OutageEntry type for use
// with apply.
type OutageEntryApplyConfiguration struct {
	Start     *v1.Time                     `json:"start,omitempty"`
	End       *v1.Time                     `json:"end,omitempty"`
	StartLogs []LogEntryApplyConfiguration `json:"startLogs,omitempty"`
	EndLogs   []LogEntryApplyConfiguration `json:"endLogs,omitempty"`
	Message   *string                      `json:"message,omitempty"`
}

// OutageEntryApplyConfiguration constructs a declarative configuration of the OutageEntry type for use with
// apply.
func OutageEntry() *OutageEntryApplyConfiguration {
	return &OutageEntryApplyConfiguration{}
}

// WithStart sets the Start field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Start field is set to the value of the last call.
func (b *OutageEntryApplyConfiguration) WithStart(value v1.Time) *OutageEntryApplyConfiguration {
	b.Start = &value
	return b
}

// WithEnd sets the End field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the End field is set to the value of the last call.
func (b *OutageEntryApplyConfiguration) WithEnd(value v1.Time) *OutageEntryApplyConfiguration {
	b.End = &value
	return b
}

// WithStartLogs adds the given value to the StartLogs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the StartLogs field.
func (b *OutageEntryApplyConfiguration) WithStartLogs(values ...*LogEntryApplyConfiguration) *OutageEntryApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithStartLogs")
		}
		b.StartLogs = append(b.StartLogs, *values[i])
	}
	return b
}

// WithEndLogs adds the given value to the EndLogs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the EndLogs field.
func (b *OutageEntryApplyConfiguration) WithEndLogs(values ...*LogEntryApplyConfiguration) *OutageEntryApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithEndLogs")
		}
		b.EndLogs = append(b.EndLogs, *values[i])
	}
	return b
}

// WithMessage sets the Message field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Message field is set to the value of the last call.
func (b *OutageEntryApplyConfiguration) WithMessage(value string) *OutageEntryApplyConfiguration {
	b.Message = &value
	return b
}
