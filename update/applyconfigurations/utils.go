// Code generated by applyconfiguration-gen. DO NOT EDIT.

package applyconfigurations

import (
	v1alpha1 "github.com/openshift/api/update/v1alpha1"
	internal "github.com/openshift/client-go/update/applyconfigurations/internal"
	updatev1alpha1 "github.com/openshift/client-go/update/applyconfigurations/update/v1alpha1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	testing "k8s.io/client-go/testing"
)

// ForKind returns an apply configuration type for the given GroupVersionKind, or nil if no
// apply configuration type exists for the given GroupVersionKind.
func ForKind(kind schema.GroupVersionKind) interface{} {
	switch kind {
	// Group=update.openshift.io, Version=v1alpha1
	case v1alpha1.SchemeGroupVersion.WithKind("ClusterOperatorStatusInsight"):
		return &updatev1alpha1.ClusterOperatorStatusInsightApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("ClusterVersionStatusInsight"):
		return &updatev1alpha1.ClusterVersionStatusInsightApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("ControlPlane"):
		return &updatev1alpha1.ControlPlaneApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("ControlPlaneInformer"):
		return &updatev1alpha1.ControlPlaneInformerApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("ControlPlaneInsight"):
		return &updatev1alpha1.ControlPlaneInsightApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("ControlPlaneInsightUnion"):
		return &updatev1alpha1.ControlPlaneInsightUnionApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("ControlPlaneUpdateVersions"):
		return &updatev1alpha1.ControlPlaneUpdateVersionsApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("HealthInsight"):
		return &updatev1alpha1.HealthInsightApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("InsightImpact"):
		return &updatev1alpha1.InsightImpactApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("InsightRemediation"):
		return &updatev1alpha1.InsightRemediationApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("InsightScope"):
		return &updatev1alpha1.InsightScopeApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("MachineConfigPoolStatusInsight"):
		return &updatev1alpha1.MachineConfigPoolStatusInsightApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("NodeStatusInsight"):
		return &updatev1alpha1.NodeStatusInsightApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("NodeSummary"):
		return &updatev1alpha1.NodeSummaryApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("Pool"):
		return &updatev1alpha1.PoolApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("PoolResourceRef"):
		return &updatev1alpha1.PoolResourceRefApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("ResourceRef"):
		return &updatev1alpha1.ResourceRefApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("UpdateStatus"):
		return &updatev1alpha1.UpdateStatusApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("UpdateStatusStatus"):
		return &updatev1alpha1.UpdateStatusStatusApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("Version"):
		return &updatev1alpha1.VersionApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("VersionMetadata"):
		return &updatev1alpha1.VersionMetadataApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("WorkerPoolInformer"):
		return &updatev1alpha1.WorkerPoolInformerApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("WorkerPoolInsight"):
		return &updatev1alpha1.WorkerPoolInsightApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("WorkerPoolInsightUnion"):
		return &updatev1alpha1.WorkerPoolInsightUnionApplyConfiguration{}

	}
	return nil
}

func NewTypeConverter(scheme *runtime.Scheme) *testing.TypeConverter {
	return &testing.TypeConverter{Scheme: scheme, TypeResolver: internal.Parser()}
}
