// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// ControlPlaneInsightApplyConfiguration represents a declarative configuration of the ControlPlaneInsight type for use
// with apply.
type ControlPlaneInsightApplyConfiguration struct {
	UID        *string                                     `json:"uid,omitempty"`
	AcquiredAt *v1.Time                                    `json:"acquiredAt,omitempty"`
	Insight    *ControlPlaneInsightUnionApplyConfiguration `json:"insight,omitempty"`
}

// ControlPlaneInsightApplyConfiguration constructs a declarative configuration of the ControlPlaneInsight type for use with
// apply.
func ControlPlaneInsight() *ControlPlaneInsightApplyConfiguration {
	return &ControlPlaneInsightApplyConfiguration{}
}

// WithUID sets the UID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the UID field is set to the value of the last call.
func (b *ControlPlaneInsightApplyConfiguration) WithUID(value string) *ControlPlaneInsightApplyConfiguration {
	b.UID = &value
	return b
}

// WithAcquiredAt sets the AcquiredAt field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AcquiredAt field is set to the value of the last call.
func (b *ControlPlaneInsightApplyConfiguration) WithAcquiredAt(value v1.Time) *ControlPlaneInsightApplyConfiguration {
	b.AcquiredAt = &value
	return b
}

// WithInsight sets the Insight field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Insight field is set to the value of the last call.
func (b *ControlPlaneInsightApplyConfiguration) WithInsight(value *ControlPlaneInsightUnionApplyConfiguration) *ControlPlaneInsightApplyConfiguration {
	b.Insight = value
	return b
}
