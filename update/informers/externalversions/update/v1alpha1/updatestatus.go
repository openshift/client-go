// Code generated by informer-gen. DO NOT EDIT.

package v1alpha1

import (
	context "context"
	time "time"

	apiupdatev1alpha1 "github.com/openshift/api/update/v1alpha1"
	versioned "github.com/openshift/client-go/update/clientset/versioned"
	internalinterfaces "github.com/openshift/client-go/update/informers/externalversions/internalinterfaces"
	updatev1alpha1 "github.com/openshift/client-go/update/listers/update/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// UpdateStatusInformer provides access to a shared informer and lister for
// UpdateStatuses.
type UpdateStatusInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() updatev1alpha1.UpdateStatusLister
}

type updateStatusInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewUpdateStatusInformer constructs a new informer for UpdateStatus type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewUpdateStatusInformer(client versioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredUpdateStatusInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredUpdateStatusInformer constructs a new informer for UpdateStatus type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredUpdateStatusInformer(client versioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.UpdateV1alpha1().UpdateStatuses().List(context.TODO(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.UpdateV1alpha1().UpdateStatuses().Watch(context.TODO(), options)
			},
		},
		&apiupdatev1alpha1.UpdateStatus{},
		resyncPeriod,
		indexers,
	)
}

func (f *updateStatusInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredUpdateStatusInformer(client, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *updateStatusInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&apiupdatev1alpha1.UpdateStatus{}, f.defaultInformer)
}

func (f *updateStatusInformer) Lister() updatev1alpha1.UpdateStatusLister {
	return updatev1alpha1.NewUpdateStatusLister(f.Informer().GetIndexer())
}
